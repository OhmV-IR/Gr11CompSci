# A2.2 Fibonacci Numbers
# REDACTED(I <3 not doxxing myself)
# Get a positive integer from the user and display that many terms in the fibonacci sequence seperated by a single space
# The next number in the fibonacci sequence is calculated by the addition of the previous 2 terms

# Define the starting 2 numbers in the fibonacci sequence, which are 1 and 1
sequence = [1,1]

# Infinite loop until we get valid user input
while True:
    # Try to get input from the user and convert it to an integer
    try:
        numsToPrint = int(input("Please enter an integer:"))
    # If converting the input to an integer fails,
    except ValueError:
        # Print that the input is not a valid integer and loop again to get new input
        print("This is not a valid integer")
    # If converting the input to an integer is successful,
    else:
        # If the integer is not a positive integer that is greater than 0,
        if numsToPrint <= 0:
            # Print that the input is valid
            print("The integer needs to be greater than 0")
        # If the integer is a positive integer that is greater than 0,
        else:
            # The input is valid and we exit the infinite loop to continue with the program
            break

# For every number that we need to print that is not already in the predefined sequence, 
for i in range(2,numsToPrint):
    # Add the next number in the sequence by adding the previous 2 numbers in the sequence
    sequence.append(sequence[i-1] + sequence[i-2])

# Print the fibonacci sequence with a space seperator instead of commas 
# and remove the brackets to start/end the list(Contribution#1)
if numsToPrint == 1:
    print(1)
else:
    print(*sequence, sep=" ")

# Test cases
"""
Please enter an integer: f
This is not a valid integer
Please enter an integer: f
This is not a valid integer
Please enter an integer: 8
1 1 2 3 5 8 13 21
"""
"""
Please enter an integer: -1
The integer needs to be above 0
Please enter an integer: -2
The integer needs to be above 0
Please enter an integer: 9
1 1 2 3 5 8 13 21 34
"""
"""
Please enter an integer: !
This is not a valid integer
Please enter an integer: *
This is not a valid integer
Please enter an integer: 3
1 1 2
"""
"""
Please enter an integer: 1.6
This is not a valid integer
Please enter an integer: 1.9
This is not a valid integer
Please enter an integer: 6
1 1 2 3 5 8
"""
"""
Please enter an integer: 0
The integer needs to be above 0
Please enter an integer: 0
The integer needs to be above 0
Please enter an integer: 4
1 1 2 3
"""
"""
Please enter an integer: 15
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610
Please enter an integer: 2
1 1
"""
"""
Please enter an integer: 1
1
"""
"""
Please enter an integer: 150
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120 4660046610375530309 7540113804746346429 12200160415121876738 19740274219868223167 31940434634990099905 51680708854858323072 83621143489848422977 135301852344706746049 218922995834555169026 354224848179261915075 573147844013817084101 927372692193078999176 1500520536206896083277 2427893228399975082453 3928413764606871165730 6356306993006846248183 10284720757613717413913 16641027750620563662096 26925748508234281076009 43566776258854844738105 70492524767089125814114 114059301025943970552219 184551825793033096366333 298611126818977066918552 483162952612010163284885 781774079430987230203437 1264937032042997393488322 2046711111473984623691759 3311648143516982017180081 5358359254990966640871840 8670007398507948658051921 14028366653498915298923761 22698374052006863956975682 36726740705505779255899443 59425114757512643212875125 96151855463018422468774568 155576970220531065681649693 251728825683549488150424261 407305795904080553832073954 659034621587630041982498215 1066340417491710595814572169 1725375039079340637797070384 2791715456571051233611642553 4517090495650391871408712937 7308805952221443105020355490 11825896447871834976429068427 19134702400093278081449423917 30960598847965113057878492344 50095301248058391139327916261 81055900096023504197206408605 131151201344081895336534324866 212207101440105399533740733471 343358302784187294870275058337 555565404224292694404015791808 898923707008479989274290850145 1454489111232772683678306641953 2353412818241252672952597492098 3807901929474025356630904134051 6161314747715278029583501626149 9969216677189303386214405760200
"""